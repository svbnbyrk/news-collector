// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsCollector.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NewsCollector.Data.Migrations
{
    [DbContext(typeof(NewsCollectorDbContext))]
    partial class NewsCollectorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("NewsCollector.Core.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("KeywordValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("NewsCollector.Core.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("NewsDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NewsTitle")
                        .HasColumnType("text");

                    b.Property<string>("NewsUrl")
                        .HasColumnType("text");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("NewsCollector.Core.Models.NewsKeyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("KeywordId")
                        .HasColumnType("integer");

                    b.Property<int>("NewsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KeywordId");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsKeywords");
                });

            modelBuilder.Entity("NewsCollector.Core.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("SourceName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("WebAdress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("NewsCollector.Core.Models.News", b =>
                {
                    b.HasOne("NewsCollector.Core.Models.Source", "Source")
                        .WithMany("News")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("NewsCollector.Core.Models.NewsKeyword", b =>
                {
                    b.HasOne("NewsCollector.Core.Models.Keyword", "Keyword")
                        .WithMany("NewsKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsCollector.Core.Models.News", "News")
                        .WithMany("NewsKeywords")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("News");
                });

            modelBuilder.Entity("NewsCollector.Core.Models.Keyword", b =>
                {
                    b.Navigation("NewsKeywords");
                });

            modelBuilder.Entity("NewsCollector.Core.Models.News", b =>
                {
                    b.Navigation("NewsKeywords");
                });

            modelBuilder.Entity("NewsCollector.Core.Models.Source", b =>
                {
                    b.Navigation("News");
                });
#pragma warning restore 612, 618
        }
    }
}
